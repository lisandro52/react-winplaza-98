{"version":3,"file":"index.js","sources":["../../node_modules/clsx/dist/clsx.mjs","../../node_modules/style-inject/dist/style-inject.es.js","../../../src/components/button/button.tsx","../../../src/components/checkbox/checkbox.tsx","../../../src/components/dropdown/dropdown.tsx","../../../src/components/group-box/group-box.tsx","../../../src/components/option-button/option-context.ts","../../../src/components/option-button/option-group.tsx","../../../src/components/option-button/option-button.tsx","../../../src/components/slider/slider.tsx","../../../src/components/text-area/text-area.tsx","../../../src/components/text-box/text-box.tsx"],"sourcesContent":["function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import clsx from 'clsx';\nimport React from 'react';\nimport './button.css';\n\n/**\n * Props for the Button component.\n */\ninterface ButtonProps extends React.ComponentProps<'button'> {\n  /**\n   * Specifies whether the button is in an active state.\n   */\n  active?: boolean;\n\n  /**\n   * Specifies whether the button is focused.\n   */\n  focused?: boolean;\n\n  /**\n   * The text or content to be displayed inside the button.\n   */\n  children: React.ReactNode;\n}\n\n/**\n * A Win98 themed button React component.\n *\n * This component extends the native HTML `button` element with additional props.\n *\n * @remarks\n * - You can use the `active` prop to set the button's active state.\n * - The `focused` prop can be used to indicate whether the button is currently focused.\n *\n * @example Creating a button\n *\n * ```tsx\n * <Button onClick={handleClick} disabled>Click me</Button>\n * ```\n */\nconst Button = ({\n  active,\n  children,\n  className,\n  focused,\n  ...buttonProps\n}: ButtonProps) => {\n  return (\n    <button\n      {...buttonProps}\n      className={clsx(className, active && 'active', focused && 'focused')}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","import React, { forwardRef } from 'react';\n\n/**\n * Props for the Checkbox component.\n */\ntype CheckboxProps = {\n  /**\n   * The name attribute for the checkbox input.\n   */\n  name: string;\n\n  /**\n   * The label text to display next to the checkbox.\n   */\n  label: string;\n} & Omit<React.InputHTMLAttributes<HTMLInputElement>, 'type' | 'id'>;\n\n/**\n * A Win98 themed checkbox React component.\n *\n * This component extends the native HTML `input` element of type `checkbox` with additional props.\n *\n * @example Creating a checkbox\n *\n * ```tsx\n * <Checkbox name=\"example\" label=\"Check this box\" />\n * ```\n *\n * @remarks\n * - The `name` prop is required and specifies the name attribute for the checkbox input.\n */\nconst Checkbox = forwardRef<HTMLInputElement, CheckboxProps>(\n  ({ name, label, ...inputProps }: CheckboxProps, ref) => {\n    return (\n      <>\n        <input\n          type=\"checkbox\"\n          name={name}\n          id={name}\n          {...inputProps}\n          ref={ref}\n        />\n        <label htmlFor={name}>{label}</label>\n      </>\n    );\n  }\n);\n\nexport default Checkbox;\n","import React, {\n  ForwardRefExoticComponent,\n  RefAttributes,\n  forwardRef,\n} from 'react';\n\n/**\n * Props for the Dropdown component.\n */\ninterface DropdownProps extends React.ComponentProps<'select'> {\n  /**\n   * The name attribute for the select element.\n   */\n  name: string;\n\n  /**\n   * An optional label for the dropdown.\n   */\n  label?: string;\n}\n\n/**\n * A Win98 themed dropdown/select React component.\n *\n * This component extends the native HTML `select` element with additional props.\n *\n * @remarks\n * This component can be used to create a dropdown/select input with custom styling\n * and behavior by extending the native `select` element. It works seamlessly with\n * the `<option />` element to provide options.\n *\n * @example Creating a dropdown with options\n *\n * ```tsx\n * <Dropdown name=\"example\" label=\"Select an option\">\n *   <option value=\"option1\">Option 1</option>\n *   <option value=\"option2\">Option 2</option>\n *   <option value=\"option3\">Option 3</option>\n * </Dropdown>\n * ```\n */\nconst Dropdown = forwardRef<HTMLSelectElement, DropdownProps>(\n  ({ name, label, children, ...selectProps }: DropdownProps, ref) => {\n    return (\n      <select ref={ref} name={name} {...selectProps}>\n        {children}\n      </select>\n    );\n  }\n);\n\nexport default Dropdown;\n","import React from 'react';\n\ninterface GroupBoxProps {\n  label?: string;\n  children: React.ReactNode;\n}\n\n/**\n * A `GroupBox` serves as a container for a set of controls.\n * It can be used to group related controls. It can also be used to visually separate a set of controls from the rest of the interface.\n * @example\n * <GroupBox>\n *   <OptionGroup name=\"groupbox-1\" defaultValue=\"2\">\n *     <OptionButton label=\"Option 1\" value=\"1\" />\n *     <OptionButton label=\"Option 2\" value=\"2\"/>\n *   </OptionGroup>\n * </GroupBox>\n */\nconst GroupBox = ({ label, children }: GroupBoxProps) => {\n  return (\n    <fieldset>\n      {label && <legend>{label}</legend>}\n      {children}\n    </fieldset>\n  );\n};\n\nGroupBox.displayName = 'GroupBox';\n\nexport default GroupBox;\n","import { createContext, useContext } from 'react';\n\ninterface OptionContextProps {\n  name: string;\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n}\n\nexport const OptionContext = createContext<OptionContextProps | undefined>(\n  undefined\n);\n\nexport const useOptionContext = (): OptionContextProps => {\n  const context = useContext(OptionContext);\n  if (context === undefined) {\n    throw new Error(\n      'The OptionButton compound components cannot be rendered outside the OptionGroup component'\n    );\n  }\n  return context;\n};\n","import React from 'react';\nimport { OptionContext } from './option-context';\n\n/**\n * Props for the OptionGroup component.\n */\ninterface OptionGroupProps {\n  /**\n   * The name of the option group.\n   */\n  name: string;\n\n  /**\n   * The currently selected value in the option group.\n   */\n  value?: string;\n\n  /**\n   * The default value for the option group.\n   */\n  defaultValue?: string;\n\n  /**\n   * A callback function that is triggered when the selected value in the option group changes.\n   * It receives the new selected value as a parameter.\n   */\n  onChange?: (value: string) => void;\n\n  /**\n   * The child components to be wrapped by the OptionGroup.\n   */\n  children: React.ReactNode;\n}\n\n/**\n * A context provider component for managing a group of options.\n *\n * This component allows you to create a context for a group of options and provides\n * the selected value, default value, and an onChange callback to its children via context.\n *\n * @example Creating an option group\n *\n * ```tsx\n * <OptionGroup name=\"fruit\" defaultValue=\"apple\">\n *   // Add Option components here\n * </OptionGroup>\n * ```\n *\n * @remarks\n * - The `name` prop is required and represents the name of the option group.\n * - You can specify the `value` prop to control the selected value in the group.\n * - The `defaultValue` prop sets the default selected value when no value is specified.\n * - The `onChange` prop can be used to handle value changes within the group.\n */\nconst OptionGroup = (props: OptionGroupProps) => {\n  return (\n    <OptionContext.Provider value={props}>\n      {props.children}\n    </OptionContext.Provider>\n  );\n};\n\nexport default OptionGroup;\n","import React, { forwardRef, useId } from 'react';\nimport { useOptionContext } from './option-context';\n\ntype OmittedProps =\n  | 'type'\n  | 'onChange'\n  | 'checked'\n  | 'defaultChecked'\n  | 'defaultValue'\n  | 'id'\n  | 'name';\n\n/**\n * Props for the OptionButton component.\n */\ninterface OptionButtonProps\n  extends Omit<React.ComponentProps<'input'>, OmittedProps> {\n  /**\n   * The label text to display next to the option button.\n   */\n  label: string;\n\n  /**\n   * The value associated with the option button.\n   */\n  value: string;\n}\n\n/**\n * A Win98 themed checkbox React component.\n *\n * This component extends the native HTML `input` element of type `radio` with additional props.\n * It is designed to be used within an `OptionGroup` to manage a group of radio options.\n *\n * @example Creating an option button\n *\n * ```tsx\n * <OptionButton label=\"Option 1\" value=\"option1\" />\n * ```\n *\n * @remarks\n * - The `label` prop is required and specifies the text to display next to the radio button.\n * - The `value` prop is required and represents the value associated with the radio button.\n * - This component is designed to work within an `OptionGroup` to manage a group of radio options.\n */\nconst OptionButton = forwardRef<HTMLInputElement, OptionButtonProps>(\n  ({ label, ...inputProps }: OptionButtonProps, ref) => {\n    const inputId = useId();\n    const { name, value, onChange, defaultValue } = useOptionContext();\n\n    return (\n      <div className=\"field-row\">\n        <input\n          id={inputId}\n          type=\"radio\"\n          name={name}\n          {...inputProps}\n          ref={ref}\n          defaultChecked={\n            defaultValue ? defaultValue === inputProps.value : undefined\n          }\n          checked={value ? value === inputProps.value : undefined}\n          onChange={(e) => onChange?.(e.target.value)}\n        />\n        <label htmlFor={inputId}>{label}</label>\n      </div>\n    );\n  }\n);\n\nexport default OptionButton;\n","import clsx from 'clsx';\nimport React, { forwardRef, useId } from 'react';\n\ntype OmitProperties =\n  | 'type'\n  | 'id'\n  | 'min'\n  | 'max'\n  | 'defaultChecked'\n  | 'value'\n  | 'onChange';\n\ninterface SliderProps\n  extends Omit<React.ComponentProps<'input'>, OmitProperties> {\n  name: string;\n  label?: string;\n  minLabel?: string;\n  maxLabel?: string;\n  min: number;\n  max: number;\n  boxIndicator?: boolean;\n  vertical?: boolean;\n  value?: number;\n  onChange?: (\n    event: React.ChangeEvent<HTMLInputElement>,\n    value: number\n  ) => void;\n}\n\nconst Slider = forwardRef<HTMLInputElement, SliderProps>(\n  (\n    {\n      name,\n      label,\n      minLabel,\n      maxLabel,\n      min,\n      max,\n      className,\n      boxIndicator = false,\n      vertical = false,\n      onChange,\n      ...inputProps\n    }: SliderProps,\n    ref\n  ) => {\n    const inputId = useId();\n\n    return (\n      <div className=\"field-row\">\n        <label htmlFor={`${inputId}-label`}>{label}</label>\n        {minLabel && <label htmlFor={inputId}>{minLabel}</label>}\n        <div className={clsx(vertical && 'is-vertical')}>\n          <input\n            {...inputProps}\n            ref={ref}\n            onChange={(event) => {\n              onChange?.(event, Number(event.target.value));\n            }}\n            className={clsx(className, {\n              'has-box-indicator': boxIndicator,\n            })}\n            id={inputId}\n            name={name}\n            type=\"range\"\n            min={min}\n            max={max}\n          />\n        </div>\n        {maxLabel && <label htmlFor={`${inputId}-high`}>{maxLabel}</label>}\n      </div>\n    );\n  }\n);\n\nexport default Slider;\n","import clsx from 'clsx';\nimport React, { forwardRef, useId } from 'react';\n\ntype OmitProperties = 'id' | 'name';\n\ninterface TextAreaProps\n  extends Omit<React.ComponentProps<'textarea'>, OmitProperties> {\n  name: string;\n  label?: string;\n  labelPosition?: 'left' | 'top';\n}\n\nconst TextArea = forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  (\n    {\n      name,\n      label,\n      labelPosition = 'top',\n      className,\n      ...inputProps\n    }: TextAreaProps,\n    ref\n  ) => {\n    const inputId = useId();\n    return (\n      <div\n        className={clsx(className, {\n          'field-row': labelPosition === 'left',\n          'field-row-stacked': labelPosition === 'top',\n        })}\n      >\n        <label htmlFor={inputId}>{label}</label>\n        <textarea ref={ref} id={inputId} name={name} {...inputProps} />\n      </div>\n    );\n  }\n);\n\nexport default TextArea;\n","import clsx from 'clsx';\nimport React, { forwardRef, useId } from 'react';\n\ntype OmitProperties = 'type' | 'id';\n\ninterface TextBoxProps\n  extends Omit<React.ComponentProps<'input'>, OmitProperties> {\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel';\n  name: string;\n  label?: string;\n  labelPosition?: 'left' | 'top';\n}\n\nconst TextBox = forwardRef<HTMLInputElement, TextBoxProps>(function TextBox(\n  {\n    type = 'text',\n    name,\n    label,\n    labelPosition = 'left',\n    className,\n    ...inputProps\n  }: TextBoxProps,\n  ref\n) {\n  const inputId = useId();\n  return (\n    <div\n      className={clsx(className, {\n        'field-row': labelPosition === 'left',\n        'field-row-stacked': labelPosition === 'top',\n      })}\n    >\n      <label htmlFor={inputId}>{label}</label>\n      <input id={inputId} name={name} type={type} ref={ref} {...inputProps} />\n    </div>\n  );\n});\n\nexport default TextBox;\n"],"names":["r","e","t","f","n","Array","isArray","length","clsx","arguments","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Button","active","children","className","focused","buttonProps","React","Checkbox","forwardRef","name","label","inputProps","Fragment","id","htmlFor","Dropdown","selectProps","GroupBox","displayName","OptionContext","createContext","undefined","OptionGroup","props","Provider","value","OptionButton","inputId","useId","onChange","defaultValue","context","useContext","Error","useOptionContext","defaultChecked","checked","target","Slider","minLabel","maxLabel","min","max","boxIndicator","vertical","event","Number","TextArea","labelPosition","TextBox"],"mappings":"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","x_google_ignoreList":[0,1]}